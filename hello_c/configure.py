"""SIP build system.

Usage:
    $ python configure.py --pyi
"""
import os
import argparse
import sipconfig


def parse_args():
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        "-y",
        "--pyi",
        action="store_true",
        help="If set, create a `.pyi` stub file for mypy",
    )
    return parser.parse_args()


def main():
    args = parse_args()

    # SIP build file generated by SIP and used by the build system.
    build_file = "sip/year_utils.sbf"
    # SIP specification file created by us.
    spec_file = "sip/year_utils.sip"
    # stub file for python type hints
    stub_file = "generated/year_utils.pyi"

    # Get the SIP configuration information.
    config = sipconfig.Configuration()

    options = [
        "-c",
        "generated",  # name of the directory into which all of the generated C++ code is placed
        "-b",
        build_file,  # name of the build file to generate
        "-g",  # The Python GIL is released before making any calls to the C/C++ library being wrapped and reacquired afterwards
    ]
    if args.pyi:
        options = options + ["-y", stub_file]
    options_str = " ".join(options)
    cmd = " ".join([config.sip_bin, options_str, spec_file])
    # Execute the command in a subshell
    os.system(cmd)

    makefile = sipconfig.SIPModuleMakefile(
        config, build_file, makefile="generated/Makefile"
    )

    # Add the library we are wrapping. The name doesn't include any platform
    # specific prefixes or extensions (e.g. the "lib" prefix on UNIX, or the
    # ".dll" extension on Windows).
    makefile.extra_libs = ["word"]

    # Generate the Makefile itself.
    makefile.generate()


if __name__ == "__main__":
    main()
